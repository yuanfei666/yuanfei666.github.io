<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HTTP Status 500 - Could not write content***]]></title>
    <url>%2F2018%2F12%2F19%2Fjson-error%2F</url>
    <content type="text"><![CDATA[后台查询数据向前端返回数据时报错：HTTP Status 500 - Could not write content** 1，原因：执行对应的sql发现有一个字段查出来时是null的，而封装到某个对象中时，并未给属性是否为null，检测，如果为null就赋予一个符合该属性类型的值，即可。123456if (!Objects.isNull(row[8])) &#123; tempOrderId = (Integer) row[8]; &#125; else &#123; tempOrderId = 0; &#125; 2，疑问比较奇特的是：debug看见数据已经被封装到对象中，但是在controller层转为json就抛异常了如下图：详细异常信息： HTTP Status 500 - Could not write content: (was java.lang.NullPointerException) (through reference chain: com.werun.template.common.utils.BaseObjectResult[“data”]-&gt;com.werun.template.api.model.OrderModifyNoticeDetailResultBean[“tempOrderId”]); nested exception is com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: com.werun.template.common.utils.BaseObjectResult[“data”]-&gt;com.werun.template.api.model.OrderModifyNoticeDetailResultBean[“tempOrderId”]) 为什么会这样呢？按照报错信息翻译是databind异常了， 3,这条数据可是有10多个字段，难道每个字段去加if和else?再回到代码中：发现数据类型都是使用的封装类型Integer,但是没有改变setter、getter 123456public int getTempOrderId() &#123; return tempOrderId; &#125; public void setTempOrderId(int tempOrderId) &#123; this.tempOrderId = tempOrderId; &#125; java类转为json类是通过getter方法来生成json的具体属性的，getXXX 就会生成一个XXX的json串的属性 4，真实原因：这里由于 属性 tempOrderId 是Integer类型，并且为null，调用get时会自动拆箱为int，但是null给拆成为int是啥效果呢？可以写代码试试：12345 @Test public void testInteger()&#123; Integer a=null; int b=a;&#125; 控制台输出： java.lang.NullPointerException at com.werun.template.common.TestUtil.testInteger(TestUtil.java:797) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method), 5，验证为了验证猜想：将getter的返回参数有int改为Integer（只更改getter返回值类型）123456public Integer getTempOrderId() &#123; return tempOrderId; &#125; public void setTempOrderId(int tempOrderId) &#123; this.tempOrderId = tempOrderId; &#125; 测试：{ “message”: “获取成功”, “data”: { “noticeId”: 164, “noticeNum”: “1545132031742”, “noticeTime”: 1545132031740, “noticeTypeCode”: “14010”, “noticeTypeName”: “订单中止审核”, “modifierId”: 272, “modifierName”: “张三”, “orderId”: 13, “tempOrderId”: null,//这个字段在作怪 “orderNum”: “K1，0，501”, “clientId”: 11, “clientName”: “，，，，，测试”, “orderStatusCode”: “，，，”, “orderStatusName”: “，，，”, “modifyContent”: “，，，”, “remarks”: “设计主管处 同意终止订单1363”, “auditResultCode”: “1300”, “auditResultName”: “接单” }, “success”: true} 至此问题解决！包装类型-&gt;基本类型可能有问题基本类型-&gt;包装类型，没问题 6 总结：数据库查询出的结果尽量使用包装类型，避免null造成的影响运算的地方使用基本类型，减少对象的创建]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>fastxml</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇hexo博客]]></title>
    <url>%2F2018%2F12%2F18%2Fhello%2F</url>
    <content type="text"><![CDATA[这是文章摘要，为了给自己一篇安静的学习天地，博客迁址于github！记录新的开始！ 习惯性的，每当一个新的阶段或者是有些感想时，一般是在时间剩余不多的的时候。习惯性的，也常常会在这个时候立下一大堆今天决定的，第二天就倒塌的体无完肤的flag。习惯性的，但是这里不能再是习惯性的。转眼，就得步入社会，面临残酷的社会竞争，离开隔离社会的最后一堵墙。经常觉得自己学到一些东西，感觉比人了不起，比别人强。但事实上，那常常是伪装，缺乏自信的伪装而已。很多时候，学到的，只是那么浅浅的一层，每个人不用太费思考就能做到的，有什么值得骄傲的？ 要提前意识到，企业不是福利结构，所有公司都不是，不会花开支来养活闲人。有人能为了自己的编程的爱好，白天上班，凌晨三点起床学习，这令我敬佩。但是如果只是 停留在敬佩，不觉得这“敬佩”一词有些苍白吗？当然，敬佩，也不是让自己同他人模仿，而是从中能学到点什么有意义的东西–那就是，为了爱好，为了兴趣，自己能耐得住寂寞，从海绵中挤出时间来完善自己，提高自己。 一个很有趣的现象，计算机专业的都很会使用百度，google，bing等工具去搜索问题的解决办法，而其他专业就感觉不会上网一样（即使是转专业到计算机专业的同学），渐渐地，我学会了问题常不加思索就上网去寻求答案，最直接的答案，简直是那种一比一的答案，少了对其中缘由的探索，少了自己对问题的思考，现在开始慎用搜索工具。 csdn，是我大学以来，一直在坚持写的，自己也很积极的在往上面更新一些博客，但是这些博客的内容，大多平淡无奇，味如嚼蜡，没有挖出更深层次的东西，缺少了自己的思考。就像是“ 改成xxx即可”，少了追问，少了求知的热情。从以后开始，没有营养的博客不公开发表，与他人博客雷同的内容不公开发表，没有自己思考的博客不公开发表。时间管理，高中是一段很美好的时光，时间管理基本不需要自己特意的下功夫，全是学校给控制好了。来到大学，学校的时间控制没有那么多条框，就需要自己的控制，而我通常是一个不善于计划时间的人，突然想起什么，就会l立刻停下手中的东西，转投入另一种东西的思考，这点真是令人苦恼。在校的作息时间，很不规律，晚上12点休息，第二天9点起床，为什么不能是11点休息，六点半起床呢？这富裕出来的一个半小时，可以用来看看书，谢谢感想，谢谢收获或，来给自己专业知识，工作能力充充电，这应该比在被窝里度过更有价值和意义吧？ 目前自己对技术的广度感觉还是可以，涉猎较多，但是实际项目中的技术涉猎很窄，而且深度远远不够。专业技能便是算法、计算机组成原理、计算机网络这些经典技能很是欠缺，必当花费时间全力掌握。 当然，每个人都不要妄自菲薄，只要是能意识到自己的问题，那么就还不算晚。自己的特点，似乎就是没有特点，要强制拽出一个特点，那就是对待事物比较认真，但是好像还不够认真，容易被外界所影响。自己选择的路，含泪跪着也要走好，走完！ 近期安排： 1，完成手里的应该做的东西 2，思考未来的职业定位 3，储备缺少的专业知识（书籍理论+实践+总结+分享） 4，与积极的人交流共事 5，主动屏蔽不良的环境因素 6，珍惜现有的时间 7，必读书籍《算法导论》、《计算机组成原理》、《计算机通信网络》 8，必须代码实践 算法+sql 此文见证自己从开始新征程，欢迎志同道合的人交流学习，一起为春招而准备，加油！]]></content>
      <categories>
        <category>-心情笔记</category>
      </categories>
      <tags>
        <tag>-心情笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F18%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
